#!/bin/bash
# OpenTelemetry etkin olarak ajan ba≈ülatma yardƒ±mcƒ± betiƒüi

if [ $# -lt 1 ]; then
    echo "Usage: $0 <AGENT_ID> [additional_claude_options]"
    echo "Example: $0 SE1"
    echo "Example: $0 PG1.1.1 --continue"
    exit 1
fi

AGENT_ID=$1
shift  # Kalan arg√ºmanlar claude i√ßindir

if [ -n "$VIBECODE_ROOT" ]; then
    PROJECT_ROOT="$VIBECODE_ROOT"
else
    PROJECT_ROOT="$(pwd)"
fi
TELEMETRY_DIR="$PROJECT_ROOT/telemetry"

if [ $# -ge 1 ] && [ -d "$PROJECT_ROOT$1" ]; then
    TARGET_DIR="$1"
    echo "üìÅ Moving to target directory: $TARGET_DIR"
    cd "$PROJECT_ROOT$TARGET_DIR" || {
        echo "‚ùå Failed to change directory to $PROJECT_ROOT$TARGET_DIR"
        exit 1
    }
    shift  # Dizin arg√ºmanƒ±nƒ± d√º≈ü
fi

# OpenTelemetry yapƒ±landƒ±rma dosyalarƒ±nƒ±n y√ºklenmesi
# √ñncelik: 1. proje_k√∂k/.env  2. telemetry/otel_config.env  3. telemetry/otel_config.env.example
if [ -f "$PROJECT_ROOT/.env" ]; then
    source "$PROJECT_ROOT/.env"
    echo "‚úÖ Loaded OpenTelemetry configuration from .env"
elif [ -f "$TELEMETRY_DIR/otel_config.env" ]; then
    source "$TELEMETRY_DIR/otel_config.env"
    echo "‚úÖ Loaded OpenTelemetry configuration from telemetry/otel_config.env"
elif [ -f "$TELEMETRY_DIR/otel_config.env.example" ]; then
    cp "$TELEMETRY_DIR/otel_config.env.example" "$PROJECT_ROOT/.env"
    source "$PROJECT_ROOT/.env"
    echo "‚úÖ Created .env from example and loaded configuration"
else
    echo "‚ö†Ô∏è  No OpenTelemetry configuration found, using default configuration"
fi

SUB_AGENT_LOG_DIR="$TELEMETRY_DIR/sub_agent_logs"
mkdir -p "$SUB_AGENT_LOG_DIR"

AGENT_TYPE=$(echo $AGENT_ID | grep -oE '^[A-Z]+')

WORKING_DIR=$(pwd)
RELATIVE_DIR=${WORKING_DIR#$PROJECT_ROOT}
RELATIVE_DIR=${RELATIVE_DIR#/}  # Ba≈ütaki eƒüik √ßizgiyi kaldƒ±r

TEAM_ID=$(echo $AGENT_ID | grep -oE '^[A-Z]+[0-9]+(\.[0-9]+)?' | sed 's/^[A-Z]*/team./')

# OTEL_RESOURCE_ATTRIBUTES g√ºncellemesi (agent_id, takƒ±m, √ßalƒ±≈üma dizini eklenir)
export OTEL_RESOURCE_ATTRIBUTES="${OTEL_RESOURCE_ATTRIBUTES},agent.id=${AGENT_ID},agent.type=${AGENT_TYPE},team.id=${TEAM_ID},working.dir=${RELATIVE_DIR}"


# OTEL_EXPORTER_OTLP_PROTOCOL„ÅåÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„ÉàÂÄ§„ÇíË®≠ÂÆö
if [ -z "$OTEL_EXPORTER_OTLP_PROTOCOL" ]; then
    export OTEL_EXPORTER_OTLP_PROTOCOL="grpc"
    echo "‚ö†Ô∏è  OTEL_EXPORTER_OTLP_PROTOCOL not set, using default: grpc"
fi

echo "üöÄ Starting agent: $AGENT_ID"
echo "üìä OpenTelemetry enabled (OTLP exporter)"
echo ""
echo "Environment:"
echo "  CLAUDE_CODE_ENABLE_TELEMETRY=$CLAUDE_CODE_ENABLE_TELEMETRY"
echo "  OTEL_METRICS_EXPORTER=$OTEL_METRICS_EXPORTER"
echo "  OTEL_EXPORTER_OTLP_PROTOCOL=$OTEL_EXPORTER_OTLP_PROTOCOL"
echo "  OTEL_EXPORTER_OTLP_ENDPOINT=$OTEL_EXPORTER_OTLP_ENDPOINT"
echo "  OTEL_RESOURCE_ATTRIBUTES=$OTEL_RESOURCE_ATTRIBUTES"
echo ""

# bash/zshÂØæÂøú„Éó„É≠„É≥„Éó„ÉàË®≠ÂÆö
if [ -n "$ZSH_VERSION" ]; then
    export PROMPT=$'%{\033[1;33m%}('${AGENT_ID}')%{\033[0m%} %{\033[1;32m%}%~%{\033[0m%}$ '
elif [ -n "$BASH_VERSION" ]; then
    export PS1="(\[\033[1;33m\]${AGENT_ID}\[\033[0m\]) \[\033[1;32m\]\w\[\033[0m\]\$ "
fi

# „Çµ„Éñ„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆ„Ç®„Ç§„É™„Ç¢„Çπ„ÇíË®≠ÂÆö
alias claude-p="$TELEMETRY_DIR/claude_p_wrapper.sh"
echo "üìä Sub-agent tracking enabled. Use 'claude-p' instead of 'claude -p'"

# ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÁ¢∫Ë™çÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
CURRENT_DIR="$(pwd 2>&1)"
if [ $? -ne 0 ]; then
    echo "‚ùå FATAL ERROR: Cannot determine current directory"
    echo "Error: $CURRENT_DIR"
    echo ""
    echo "This may be caused by:"
    echo "- Directory was deleted while script is running"
    echo "- WSL file system synchronization issue"
    echo "- Directory permissions problem"
    echo ""
    echo "Please check your working directory and try again."
    exit 1
fi

HOOKS_MODE="${CLI_HOOKS_MODE:-auto}"
if [ "$HOOKS_MODE" = "custom" ] || [ "$HOOKS_MODE" = "hybrid" ]; then
    if [ -n "$TMUX_PANE" ]; then
        echo "üîç Starting state monitor for $AGENT_ID (pane: $TMUX_PANE)"
        "$TELEMETRY_DIR/state_monitor_tmux.sh" "$AGENT_ID" "$TMUX_PANE" > /dev/null 2>&1 &
        MONITOR_PID=$!
        echo "   Monitor PID: $MONITOR_PID"
    else
        echo "‚ö†Ô∏è  Warning: Not in tmux pane, custom hooks monitoring disabled"
    fi
fi

# Claude Code‚Äôu ba≈ülat
echo "Starting claude with options: --dangerously-skip-permissions $@"
echo "Current directory: $CURRENT_DIR"
echo ""
echo "‚ö†Ô∏è  Note: OpenTelemetry metrics are sent to OTLP endpoint"
echo "    Configure your collector at: $OTEL_EXPORTER_OTLP_ENDPOINT"
echo ""

# Claude Code‚Äôu ba≈ülat (yeniden y√∂nlendirme yok)
claude --dangerously-skip-permissions "$@"

echo ""
echo "‚úÖ Agent $AGENT_ID session ended"
echo "üìä Metrics were sent to OTLP endpoint: $OTEL_EXPORTER_OTLP_ENDPOINT"
echo ""
echo "To view metrics, check your configured backend (Grafana, LangFuse, etc.)"
