#!/bin/bash

set -e

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

log_info() {
    echo -e "\033[1;32m[INFO]\033[0m $1"
}

log_success() {
    echo -e "\033[1;34m[SUCCESS]\033[0m $1"
}

log_error() {
    echo -e "\033[1;31m[ERROR]\033[0m $1"
}

show_usage() {
    cat << EOF
üìä VibeCodeHPC Grafana ortamƒ± kurulumu

Kullanƒ±m:
  $0 [„Ç™„Éó„Ç∑„Éß„É≥]

Se√ßenekler:
  --check-only   : Sadece yapƒ±landƒ±rmayƒ± kontrol et (Docker ba≈ülatƒ±lmaz)
  --reset        : Mevcut konteynerleri silip yeniden olu≈ütur
  --help         : Bu yardƒ±mƒ± g√∂ster

Bu betik a≈üaƒüƒ±dakileri otomatik olarak yapar:
1. .env dosyasƒ±nƒ± doƒürulama/olu≈üturma
2. Docker ortamƒ±nƒ± doƒürulama
3. Grafana + Prometheus + OTel Collector‚Äôƒ± ba≈ülatma
4. Baƒülantƒ± bilgilerinin g√∂sterimi

EOF
}

setup_env() {
    log_info "üìù OpenTelemetry yapƒ±landƒ±rmasƒ± kontrol ediliyor..."
    
    cd "$SCRIPT_DIR"
    
    if [ -f "otel_config.env" ]; then
        log_success "Mevcut otel_config.env kullanƒ±lacak"
    elif [ -f "otel_config.env.example" ]; then
        cp otel_config.env.example otel_config.env
        log_success "otel_config.env olu≈üturuldu"
    else
        log_error "otel_config.env.example bulunamadƒ±"
        exit 1
    fi
    
    if grep -q "OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317" otel_config.env; then
        log_info "‚úÖ Varsayƒ±lan yerel u√ß nokta ayarƒ± doƒürulandƒ±"
    else
        log_info "‚ö†Ô∏è  √ñzel bir u√ß nokta yapƒ±landƒ±rƒ±lmƒ±≈ü"
        grep "OTEL_EXPORTER_OTLP_ENDPOINT" otel_config.env || true
    fi
}

check_docker() {
    log_info "üê≥ Docker ortamƒ± kontrol ediliyor..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker kurulu deƒüil"
        echo "Docker kurulum bilgisi: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker daemon √ßalƒ±≈ümƒ±yor"
        echo "L√ºtfen Docker Desktop‚Äôƒ± ba≈ülatƒ±n"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null 2>&1; then
        log_error "Docker Compose kurulu deƒüil"
        exit 1
    fi
    
    log_success "Docker ortamƒ± doƒürulamasƒ± tamamlandƒ±"
}

start_grafana() {
    log_info "üöÄ Grafana ortamƒ± ba≈ülatƒ±lƒ±yor..."
    
    cd "$SCRIPT_DIR"
    
    log_info "üì• Docker imajlarƒ± indiriliyor..."
    if docker compose version &> /dev/null 2>&1; then
        docker compose pull
        docker compose up -d
    else
        docker-compose pull
        docker-compose up -d
    fi
    
    sleep 5
    
    if docker ps | grep -q "grafana"; then
        log_success "‚úÖ Grafana ortamƒ± ba≈üarƒ±yla ba≈ülatƒ±ldƒ±"
        echo ""
        echo "üê≥ √áalƒ±≈üan konteynerler:"
        docker ps --format "table {{.Names}}\t{{.Ports}}" | grep -E "(grafana|prometheus|otel)"
    else
        log_error "Grafana ortamƒ± ba≈ülatƒ±lamadƒ±"
        GRAFANA_CONTAINER=$(docker ps -a --format "{{.Names}}" | grep grafana | head -1)
        if [ -n "$GRAFANA_CONTAINER" ]; then
            docker logs "$GRAFANA_CONTAINER" 2>&1 | tail -20
        fi
        exit 1
    fi
}

show_connection_info() {
    echo ""
    echo "=================================================="
    echo "üìä VibeCodeHPC Grafana ortamƒ± ba≈ülatƒ±ldƒ±"
    echo "=================================================="
    echo ""
    echo "üåê Eri≈üim URL‚Äôleri:"
    echo "   Grafana: http://localhost:3000"
    
    if grep -qi microsoft /proc/version; then
        echo "   WSL ortamƒ±nda: Windows tarafƒ±ndaki tarayƒ±cƒ±dan eri≈üin"
        # WSL2„ÅÆÂ†¥Âêà„ÄÅÂÆüÈöõ„ÅÆIP„Ç¢„Éâ„É¨„Çπ„ÇÇË°®Á§∫
        if command -v ip &> /dev/null; then
            WSL_IP=$(ip addr show eth0 | grep 'inet ' | awk '{print $2}' | cut -d/ -f1)
            echo "   veya: http://${WSL_IP}:3000"
        fi
    fi
    
    echo ""
    echo "üîê Giri≈ü bilgileri:"
    echo "   Kullanƒ±cƒ± adƒ±: admin"
    echo "   Parola: admin"
    echo "   Not: ƒ∞lk giri≈üte parola deƒüi≈ütirmeniz istenir"
    echo ""
    echo "üì° Aracƒ± baƒülantƒ± ayarlarƒ±:"
    echo "   OTLP u√ß noktasƒ±: http://localhost:4317"
    echo ""
    echo "üîß Konteyner y√∂netimi:"
    echo "   Durum kontrol√º: docker ps"
    echo "   G√ºnl√ºkler: docker logs [KONTEYNER_ADI]"
    echo "   Durdur: cd $SCRIPT_DIR && docker compose down"
    echo ""
    echo "üìà Metrik kontrol adƒ±mlarƒ±:"
    echo "   1. http://localhost:3000 adresine gidin"
    echo "   2. Sol men√ºden ‚ÄúExplore‚Äù‚Äôu se√ßin"
    echo "   3. ‚ÄúPrometheus‚Äù veri kaynaƒüƒ±nƒ± se√ßin"
    echo "   4. Metrik adƒ±nƒ± girin (√∂r: agent_token_usage)"
    echo ""
}

reset_containers() {
    log_info "üîÑ Mevcut konteynerler siliniyor..."
    
    cd "$SCRIPT_DIR"
    
    if docker compose version &> /dev/null 2>&1; then
        docker compose down -v
    else
        docker-compose down -v
    fi
    
    log_success "Mevcut konteynerler silindi"
}

# „É°„Ç§„É≥Âá¶ÁêÜ
main() {
    case "${1:-}" in
        --help|-h)
            show_usage
            exit 0
            ;;
        --check-only)
            setup_env
            check_docker
            log_success "Yapƒ±landƒ±rma doƒürulamasƒ± tamamlandƒ±"
            exit 0
            ;;
        --reset)
            check_docker
            reset_containers
            setup_env
            start_grafana
            show_connection_info
            ;;
        "")
            setup_env
            check_docker
            start_grafana
            show_connection_info
            ;;
        *)
            log_error "Bilinmeyen se√ßenek: $1"
            show_usage
            exit 1
            ;;
    esac
}

main "$@"
